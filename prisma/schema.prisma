// chronos/prisma/schema.prisma
// This is your Prisma schema file for Chronos
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "jsonProtocol", "extendedWhereUnique"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ====================================================================
// User & Authentication Models
// ====================================================================

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  emailVerified         DateTime?
  name                  String?
  username              String?   @unique
  avatar                String?
  bio                   String?
  timezone              String    @default("UTC")
  locale                String    @default("en")
  dateFormat            String    @default("MM/dd/yyyy")
  timeFormat            String    @default("12h")
  weekStartsOn          Int       @default(0) // 0 = Sunday, 1 = Monday
  defaultCalendarView   ViewMode  @default(WEEK)
  
  // Preferences stored as JSON
  preferences           Json      @default("{}")
  notificationSettings  Json      @default("{}")
  keyboardShortcuts     Json      @default("{}")
  
  // Onboarding & Setup
  onboardingCompleted   Boolean   @default(false)
  onboardingStep        Int       @default(0)
  setupCompletedAt      DateTime?
  
  // Subscription & Billing
  subscriptionTier      Tier      @default(FREE)
  subscriptionStatus    SubscriptionStatus @default(ACTIVE)
  subscriptionEndDate   DateTime?
  stripeCustomerId      String?   @unique
  stripeSubscriptionId  String?   @unique
  
  // Activity Tracking
  lastActiveAt          DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? // Soft delete
  
  // Relations
  accounts              Account[]
  sessions              Session[]
  calendars             Calendar[]
  events                Event[]
  tasks                 Task[]
  categories            Category[]
  tags                  Tag[]
  focusSessions         FocusSession[]
  insights              Insight[]
  notifications         Notification[]
  activityLogs          ActivityLog[]
  integrations          Integration[]
  aiSuggestions         AISuggestion[]
  templates             Template[]
  goals                 Goal[]
  habits                Habit[]
  
  // Sharing & Collaboration
  sharedCalendars       CalendarShare[]  @relation("SharedWith")
  ownedShares           CalendarShare[]  @relation("Owner")
  eventAttendances      EventAttendee[]
  taskAssignments       TaskAssignment[] @relation("AssignedTo")
  taskCreations         TaskAssignment[] @relation("AssignedBy")
  teamMemberships       TeamMember[]
  
  @@index([email])
  @@index([username])
  @@index([stripeCustomerId])
  @@index([lastActiveAt])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("sessions")
}

// ====================================================================
// Calendar & Event Models
// ====================================================================

model Calendar {
  id                String          @id @default(cuid())
  name              String
  slug              String?         @unique
  description       String?
  color             String          @default("#3B82F6")
  icon              String?
  isDefault         Boolean         @default(false)
  isPublic          Boolean         @default(false)
  isArchived        Boolean         @default(false)
  
  // Settings
  timezone          String?
  settings          Json            @default("{}")
  permissions       Json            @default("{}")
  
  // Metadata
  eventCount        Int             @default(0)
  lastEventAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  
  // Relations
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  events            Event[]
  shares            CalendarShare[]
  
  @@unique([userId, name])
  @@index([userId])
  @@index([slug])
  @@index([isPublic])
  @@map("calendars")
}

model CalendarShare {
  id           String     @id @default(cuid())
  calendarId   String
  sharedWithId String
  sharedById   String
  permission   Permission @default(VIEW)
  expiresAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  calendar     Calendar   @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  sharedWith   User       @relation("SharedWith", fields: [sharedWithId], references: [id], onDelete: Cascade)
  sharedBy     User       @relation("Owner", fields: [sharedById], references: [id], onDelete: Cascade)
  
  @@unique([calendarId, sharedWithId])
  @@index([sharedWithId])
  @@index([calendarId])
  @@map("calendar_shares")
}

model Event {
  id                String          @id @default(cuid())
  title             String
  slug              String?         @unique
  description       String?         @db.Text
  location          String?
  locationUrl       String?
  locationDetails   Json?           // { address, lat, lng, placeId }
  
  // Date & Time
  startDateTime     DateTime
  endDateTime       DateTime
  allDay            Boolean         @default(false)
  timezone          String          @default("UTC")
  
  // Recurrence
  isRecurring       Boolean         @default(false)
  recurringRule     String?         // RRULE format
  recurringId       String?         // Parent recurring event
  recurringEndDate  DateTime?
  excludeDates      DateTime[]      // Excluded dates for recurring events
  
  // Appearance
  color             String?
  icon              String?
  
  // Status & Privacy
  status            EventStatus     @default(CONFIRMED)
  visibility        Visibility      @default(PRIVATE)
  isBusy            Boolean         @default(true)
  isLocked          Boolean         @default(false)
  
  // Reminders & Notifications
  reminders         Json            @default("[]") // Array of reminder objects
  enableReminders   Boolean         @default(true)
  
  // Meeting Details
  meetingUrl        String?
  meetingProvider   String?         // zoom, meet, teams, etc.
  meetingDetails    Json?
  
  // Metadata
  metadata          Json            @default("{}")
  attachments       Json            @default("[]")
  source            String?         // google, outlook, manual, ai
  externalId        String?         // External calendar event ID
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  
  // Relations
  userId            String
  calendarId        String
  categoryId        String?
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendar          Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  category          Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  attendees         EventAttendee[]
  tasks             Task[]
  tags              EventTag[]
  comments          Comment[]       @relation("EventComments")
  activityLogs      ActivityLog[]
  
  @@index([userId])
  @@index([calendarId])
  @@index([startDateTime, endDateTime])
  @@index([recurringId])
  @@index([slug])
  @@index([status])
  @@map("events")
}

model EventAttendee {
  id                String          @id @default(cuid())
  eventId           String
  userId            String?
  email             String
  name              String?
  avatar            String?
  status            AttendeeStatus  @default(PENDING)
  role              AttendeeRole    @default(ATTENDEE)
  comment           String?
  notified          Boolean         @default(false)
  notifiedAt        DateTime?
  respondedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  event             Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user              User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@unique([eventId, email])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@map("event_attendees")
}

// ====================================================================
// Task Management Models
// ====================================================================

model Task {
  id                String           @id @default(cuid())
  title             String
  description       String?          @db.Text
  
  // Scheduling
  dueDate           DateTime?
  dueTime           String?          // Specific time if needed
  scheduledDate     DateTime?
  scheduledDuration Int?             // Duration in minutes
  completedAt       DateTime?
  
  // Priority & Status
  priority          Priority         @default(MEDIUM)
  status            TaskStatus       @default(TODO)
  progress          Int              @default(0) // 0-100
  
  // Time Tracking
  estimatedTime     Int?             // in minutes
  actualTime        Int?             // in minutes
  timeSpent         Int              @default(0) // Total time spent
  
  // Recurrence
  isRecurring       Boolean          @default(false)
  recurringRule     String?
  recurringId       String?
  
  // Organization
  order             Int              @default(0)
  column            String?          // For kanban view
  labels            String[]         // Quick labels
  
  // Metadata
  metadata          Json             @default("{}")
  attachments       Json             @default("[]")
  checklist         Json             @default("[]") // Subtask checklist
  
  // Timestamps
  startedAt         DateTime?
  pausedAt          DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  
  // Relations
  userId            String
  categoryId        String?
  eventId           String?
  parentTaskId      String?
  goalId            String?
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category          Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  event             Event?           @relation(fields: [eventId], references: [id], onDelete: SetNull)
  parentTask        Task?            @relation("TaskSubtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  goal              Goal?            @relation(fields: [goalId], references: [id], onDelete: SetNull)
  subtasks          Task[]           @relation("TaskSubtasks")
  assignments       TaskAssignment[]
  tags              TaskTag[]
  focusSessions     FocusSession[]
  comments          Comment[]        @relation("TaskComments")
  activityLogs      ActivityLog[]
  dependencies      TaskDependency[] @relation("DependentTask")
  dependents        TaskDependency[] @relation("DependsOnTask")
  
  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@index([parentTaskId])
  @@index([eventId])
  @@index([priority, status])
  @@map("tasks")
}

model TaskAssignment {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  assignedBy  String
  role        String   @default("assignee")
  assignedAt  DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation("AssignedTo", fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User  @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)
  
  @@unique([taskId, userId])
  @@index([userId])
  @@index([taskId])
  @@map("task_assignments")
}

model TaskDependency {
  id              String   @id @default(cuid())
  dependentTaskId String
  dependsOnTaskId String
  type            DependencyType @default(FINISH_TO_START)
  createdAt       DateTime @default(now())
  
  dependentTask   Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependsOnTask   Task     @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  
  @@unique([dependentTaskId, dependsOnTaskId])
  @@index([dependentTaskId])
  @@index([dependsOnTaskId])
  @@map("task_dependencies")
}

// ====================================================================
// Organization Models
// ====================================================================

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String
  color       String   @default("#6B7280")
  icon        String?
  description String?
  order       Int      @default(0)
  isArchived  Boolean  @default(false)
  userId      String
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[] @relation("CategoryHierarchy")
  events      Event[]
  tasks       Task[]
  
  @@unique([userId, slug])
  @@index([userId])
  @@index([parentId])
  @@map("categories")
}

model Tag {
  id          String     @id @default(cuid())
  name        String
  slug        String
  color       String     @default("#9CA3AF")
  description String?
  userId      String
  usageCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  events      EventTag[]
  tasks       TaskTag[]
  
  @@unique([userId, slug])
  @@index([userId])
  @@index([usageCount])
  @@map("tags")
}

model EventTag {
  eventId     String
  tagId       String
  createdAt   DateTime @default(now())
  
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([eventId, tagId])
  @@index([tagId])
  @@map("event_tags")
}

model TaskTag {
  taskId      String
  tagId       String
  createdAt   DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([taskId, tagId])
  @@index([tagId])
  @@map("task_tags")
}

// ====================================================================
// Productivity Models
// ====================================================================

model FocusSession {
  id          String      @id @default(cuid())
  type        SessionType @default(POMODORO)
  status      SessionStatus @default(ACTIVE)
  
  // Timing
  startTime   DateTime
  endTime     DateTime?
  pausedTime  DateTime?
  resumedTime DateTime?
  plannedDuration Int     // in minutes
  actualDuration Int?    // in seconds
  breakDuration Int?     // in seconds
  pauseCount  Int        @default(0)
  
  // Settings
  settings    Json       @default("{}") // Timer settings
  
  // Metadata
  notes       String?
  mood        Int?       // 1-5 rating
  productivity Int?      // 1-5 rating
  distractions Int      @default(0)
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  userId      String
  taskId      String?
  goalId      String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: SetNull)
  goal        Goal?      @relation(fields: [goalId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([startTime])
  @@index([status])
  @@map("focus_sessions")
}

model Goal {
  id            String     @id @default(cuid())
  title         String
  description   String?
  targetValue   Float
  currentValue  Float      @default(0)
  unit          String?
  type          GoalType
  status        GoalStatus @default(ACTIVE)
  priority      Priority   @default(MEDIUM)
  
  // Timing
  startDate     DateTime
  endDate       DateTime
  completedAt   DateTime?
  
  // Metadata
  color         String?
  icon          String?
  metadata      Json       @default("{}")
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  userId        String
  categoryId    String?
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  focusSessions FocusSession[]
  habits        Habit[]
  milestones    Milestone[]
  
  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@map("goals")
}

model Habit {
  id            String      @id @default(cuid())
  name          String
  description   String?
  frequency     Frequency
  targetCount   Int         @default(1)
  currentStreak Int         @default(0)
  bestStreak    Int         @default(0)
  totalCount    Int         @default(0)
  
  // Schedule
  scheduledDays Int[]       // 0-6 for days of week
  scheduledTime String?     // HH:mm format
  
  // Appearance
  color         String?
  icon          String?
  
  // Status
  isActive      Boolean     @default(true)
  isPaused      Boolean     @default(false)
  
  // Timestamps
  lastCompletedAt DateTime?
  startedAt     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  userId        String
  goalId        String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal          Goal?       @relation(fields: [goalId], references: [id], onDelete: SetNull)
  logs          HabitLog[]
  
  @@index([userId])
  @@index([isActive])
  @@map("habits")
}

model HabitLog {
  id          String   @id @default(cuid())
  habitId     String
  date        DateTime
  completed   Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  @@unique([habitId, date])
  @@index([habitId])
  @@index([date])
  @@map("habit_logs")
}

model Milestone {
  id          String   @id @default(cuid())
  goalId      String
  title       String
  description String?
  targetValue Float
  completed   Boolean  @default(false)
  completedAt DateTime?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  @@index([goalId])
  @@map("milestones")
}

// ====================================================================
// Analytics & AI Models
// ====================================================================

model Insight {
  id          String      @id @default(cuid())
  type        InsightType
  category    String
  title       String
  content     String      @db.Text
  data        Json
  score       Float?
  confidence  Float?      // AI confidence score
  impact      Impact      @default(MEDIUM)
  
  // Validity
  validFrom   DateTime
  validTo     DateTime
  isRead      Boolean     @default(false)
  isActionable Boolean   @default(true)
  isDismissed Boolean     @default(false)
  
  // Actions
  suggestedActions Json   @default("[]")
  actionTaken String?
  actionTakenAt DateTime?
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([validFrom, validTo])
  @@index([isRead])
  @@map("insights")
}

model AISuggestion {
  id          String        @id @default(cuid())
  type        SuggestionType
  context     String        // Where the suggestion appears
  trigger     String        // What triggered the suggestion
  
  // Content
  title       String
  description String?
  suggestion  Json          // Structured suggestion data
  confidence  Float
  priority    Priority      @default(MEDIUM)
  
  // User Interaction
  status      SuggestionStatus @default(PENDING)
  accepted    Boolean?
  feedback    String?
  appliedAt   DateTime?
  dismissedAt DateTime?
  
  // Metadata
  metadata    Json          @default("{}")
  
  // Timestamps
  createdAt   DateTime      @default(now())
  expiresAt   DateTime?
  
  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("ai_suggestions")
}

// ====================================================================
// System Models
// ====================================================================

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  channel     NotificationChannel @default(IN_APP)
  
  // Content
  title       String
  content     String
  data        Json?
  actionUrl   String?
  
  // Status
  isRead      Boolean          @default(false)
  readAt      DateTime?
  isSent      Boolean          @default(false)
  sentAt      DateTime?
  error       String?
  
  // Scheduling
  scheduledFor DateTime?
  
  // Timestamps
  createdAt   DateTime         @default(now())
  expiresAt   DateTime?
  
  // Relations
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([type])
  @@index([createdAt])
  @@index([scheduledFor])
  @@map("notifications")
}

model ActivityLog {
  id          String       @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  changes     Json?        // Before/after values
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())
  
  // Relations
  userId      String
  eventId     String?
  taskId      String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event?       @relation(fields: [eventId], references: [id], onDelete: SetNull)
  task        Task?        @relation(fields: [taskId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("activity_logs")
}

model Integration {
  id            String           @id @default(cuid())
  provider      String           // google, outlook, notion, etc.
  type          IntegrationType
  status        IntegrationStatus @default(PENDING)
  
  // Authentication
  accessToken   String?          @db.Text
  refreshToken  String?          @db.Text
  expiresAt     DateTime?
  scope         String?
  
  // Configuration
  config        Json             @default("{}")
  syncSettings  Json             @default("{}")
  lastSyncAt    DateTime?
  lastSyncStatus String?
  lastSyncError String?
  
  // Timestamps
  connectedAt   DateTime?
  disconnectedAt DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@index([status])
  @@map("integrations")
}

model Template {
  id          String       @id @default(cuid())
  type        TemplateType
  name        String
  slug        String
  description String?
  
  // Content
  content     Json         // Template structure
  settings    Json         @default("{}")
  variables   Json         @default("[]") // Template variables
  
  // Metadata
  category    String?
  tags        String[]
  isPublic    Boolean      @default(false)
  isPremium   Boolean      @default(false)
  usageCount  Int          @default(0)
  rating      Float?
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, slug])
  @@index([userId])
  @@index([type])
  @@index([isPublic])
  @@map("templates")
}

// ====================================================================
// Collaboration Models
// ====================================================================

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  avatar      String?
  
  // Settings
  settings    Json     @default("{}")
  features    String[] // Enabled features
  
  // Billing
  plan        TeamPlan @default(FREE)
  seats       Int      @default(5)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  members     TeamMember[]
  
  @@index([slug])
  @@map("teams")
}

model TeamMember {
  id          String   @id @default(cuid())
  teamId      String
  userId      String
  role        TeamRole @default(MEMBER)
  permissions Json     @default("[]")
  joinedAt    DateTime @default(now())
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
  @@index([userId])
  @@index([teamId])
  @@map("team_members")
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  
  // Relations
  userId      String
  eventId     String?
  taskId      String?
  parentId    String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event?   @relation("EventComments", fields: [eventId], references: [id], onDelete: Cascade)
  task        Task?    @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  
  // Metadata
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([eventId])
  @@index([taskId])
  @@index([parentId])
  @@map("comments")
}

// ====================================================================
// Enums
// ====================================================================

enum ViewMode {
  DAY
  WEEK
  MONTH
  YEAR
  AGENDA
  TIMELINE
}

enum Tier {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  PAUSED
  TRIALING
}

enum Permission {
  VIEW
  COMMENT
  EDIT
  ADMIN
  OWNER
}

enum EventStatus {
  TENTATIVE
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Visibility {
  PRIVATE
  PUBLIC
  SHARED
  TEAM
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE
}

enum AttendeeRole {
  ORGANIZER
  REQUIRED
  OPTIONAL
  CHAIR
  OBSERVER
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
  NONE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  IN_REVIEW
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum SessionType {
  POMODORO
  DEEP_WORK
  BREAK
  MEETING
  PLANNING
  REVIEW
  CUSTOM
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum GoalType {
  NUMERIC
  PERCENTAGE
  BINARY
  MILESTONE
  HABIT
}

enum GoalStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  ARCHIVED
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum InsightType {
  PRODUCTIVITY
  TIME_USAGE
  PATTERN
  SUGGESTION
  ACHIEVEMENT
  WARNING
  TIP
}

enum Impact {
  HIGH
  MEDIUM
  LOW
  CRITICAL
}

enum SuggestionType {
  SCHEDULE
  TASK
  FOCUS
  BREAK
  REORGANIZE
  OPTIMIZE
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
  APPLIED
  EXPIRED
}

enum NotificationType {
  REMINDER
  INVITATION
  UPDATE
  ACHIEVEMENT
  SYSTEM
  ALERT
  DIGEST
}

enum NotificationChannel {
  IN_APP
  EMAIL
  PUSH
  SMS
  WEBHOOK
}

enum IntegrationType {
  CALENDAR
  TASK
  COMMUNICATION
  STORAGE
  ANALYTICS
  AUTOMATION
}

enum IntegrationStatus {
  PENDING
  CONNECTED
  DISCONNECTED
  ERROR
  EXPIRED
}

enum TemplateType {
  EVENT
  TASK
  PROJECT
  WORKFLOW
  ROUTINE
  GOAL
}

enum TeamPlan {
  FREE
  STARTER
  BUSINESS
  ENTERPRISE
}

enum TeamRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}
